================================================================================
INJECTME.NVIM                                           *injectme.nvim*

This plugin helps you to setup language injections with treesitter. Use it to
configure and try different injections. You can delete the plugin, once you
are happy with the injections, because it provides a command that saves the
selected injections to your runtime.
See |:treesitter-language-injections| and the treesitter query language for
the basis of this plugin.

These "injections" are language segments in a file 
which should be highlighted using the syntax rules of another language. By 
default, it uses syntax highlighting for the current language but this 
plugin allows you to use syntax highlighting of a different language.

Each injection is defined by a language and a descriptive ID.
See  https://github.com/Dronakurl/injectme.nvim for a list of injections

Setup and configuration: 
  >
  require("injectme").setup({
    mode = "standard", 
    -- "all"/ "none" if all/no injections should be activated on startup
    --    When you use, lazy loading, call :InjectemeInfo to activate
    -- "standard", if no injections should be changed from standard settings in 
    --    the runtime directory, i.e. ~/.config/nvim/queries/<language>/injections.scm
    reload_all_buffers = true, 
    -- after toggling an injection, all buffers are reloaded to reset treesitter
    -- you can set this to false, and avoid that the plugin asks you to save buffers 
    -- before changing an injection
    reset_treesitter = true,
    -- after toggling an injections, the treesitter parser is reset
    -- Currently, this does nothing, see this discussion on github
    -- https://github.com/nvim-treesitter/nvim-treesitter/discussions/5684
  })
  <

CONFIGURATION                                           *injectme.nvim-configuration*

The main configuration options for injectme.nvim are set in the M.config 
table. Here are the available settings and their meanings:

`mode`            Determines whether all injections should be activated 
("all"), none ("none"), or no changes should be made from the  
settings in the queries folder ("standard").

`reload_all_buffers`  If set to true, after toggling an injection, all 
buffers will get reloaded to reset treesitter.

`reset_treesitter`    If set to true, after toggling an injections, the 
treesitter parser is reset, so that new injections are shown.


COMMANDS                                              *injectme.nvim-functions*

The following is a list of injectme.nvim plugin commands:

                                                             *:InspectmeToggle*
Toggles one of the pre-configured language injections, use tab completion
to select the injections

                                                                *:InjectmeSave*
Saves the selected injections to your runtime, set mode to "standard". 
When you are happy with this setting and do not want to change it dynamically, 
you can safely delete the plugin, the injections will continue to work.
Use tab completion to (optionally) select the languages for which the 
injections should be saved.

                                                                *:InjectmeLeave*
When you are ready to manage your injections on your own, run this command.
You will be asked, if to save your queries again or just delete the 
injectme.nvim settings file or both


                                                                *:InjectmeInfo*
Display current configured injections in the messages

                                                  *injectme.toggle_injection()*

injectme.toggle_injection({language}, {injection_id})

    For language {language}, this function switches the preconfigured language 
    injection with {injection_id} on and off. When the setting 
    reload_all_buffers is set:

      >
      require("injectme").config.reload_all_buffers = true
      <


                                                  *injectme.save_injections()*

injectme.save_injections({language})

    For language {language}, this function saves the injections. 
    See |:InjectmeSave|

vim:tw=78:ts=8:ft=help:norl:
